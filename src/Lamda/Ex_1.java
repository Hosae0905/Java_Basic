package Lamda;

/**
 * 람다식
 * 함수를 간단한 식으로 표현하는 방법
 * 익명 함수(이름이 없는 함수)를 사용한다.
 * 함수와 메서드의 차이
 * 근본적으로 동일하지만 함수는 일반적인 용어, 메서드는 객체지향개념의 용어
 * 함수는 클래스에 독립적, 메서드는 클래스에 종속적
 *
 * 람다식 작성하기
 * 메서드의 이름과 반환타입을 제거하고 -> 를 블록 앞에 추가한다.
 * 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에 ;를 안 붙인다.)
 * 매개변수의 타입이 추론 가능하면 생략 가능(대부분의 경우 생략 가능하다)
 *
 * 주의사항
 * 매개변수가 하나인 경우 괄호 생략 가능(타입이 없을 때만)
 * 블록 안의 문장이 하나뿐일 때 괄호를 생략할 수 있다. (끝에 ; 안 붙임)
 *
 * 람다식은 익명 함수가 아니라 익명 객체이다.
 * 람다식을 다루기 위한 참조변수가 필요한데 참조변수 타입을 지정해줘야 한다.
 *
 */

public class Ex_1 {
    public static void main(String[] args) {
        /*Object obj = new Object() {
            int max(int a, int b) {
                return a > b ? a : b;
            }
        };      // --> 람다식으로 바꾸면 (a, b) -> a > b ? a : b
        
        int value = obj.max(3, 5);  // Object에는 max 메서드가 없기 때문에 사용할 수 없다. --> 함수형 인터페이스가 필요함*/


    }
}
